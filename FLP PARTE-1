#lang eopl

;1

;; Función list-length
;; Propósito:
;; list-length L -> n: Procedimiento que recibe una lista L y retorna la longitud de la lista.
;;
;; Gramática BNF
;;    <list>  ::= '() | <element> <list>
;; <element>  ::= <dato> | <list>
;;    <dato>  ::= <number> | <symbol> 

(define list-length
  (lambda (lst)
    (if (null? lst)
        0
        (+ 1 (list-length (cdr lst))))))

;; Función valid-list?
;; Propósito:
;; valid-list? L -> #t | #f: Procedimiento que recibe una lista L y determina si es válida.
;;                           Una lista válida está compuesta únicamente por sublistas de exactamente dos enteros.
;;
;; Gramática BNF
;;    <list>       ::= '() | <sublist> <list>
;; <sublist>       ::= <int> <int>
;;    <int>        ::= <number>
;;    <number>     ::= un número entero

(define valid-list?
  (lambda (lst)
    (cond
      [(null? lst) #t] 
      [(and (list? (car lst))  
            (= (list-length (car lst)) 2) 
            (integer? (car (car lst)))  
            (integer? (cadr (car lst)))) 
       (valid-list? (cdr lst))]  
      [else #f])))


;; Función reverse-list
;; Propósito:
;; reverse-list L -> L': Procedimiento que recibe una lista L y retorna la lista L' con los elementos en orden inverso.
;;
;; Gramática BNF
;;    <list>  ::= '() | <element> <list>
;; <element>  ::= <dato> | <list>
;;    <dato>  ::= <number> | <symbol> 


(define (reverse-list lst)
  (letrec ([reverse-helper
            (lambda (lst accum)
              (if (null? lst)
                  accum
                  (reverse-helper (cdr lst) (cons (car lst) accum))))])
    (reverse-helper lst '())))


;; Función invert
;; Propósito:
;; invert L pred? -> L': Procedimiento que recibe una lista L y un predicado pred?. 
;;                      Retorna una nueva lista L' donde cada sublista válida de L es invertida si ambos elementos 
;;                      cumplen con el predicado pred?.
;;
;; Gramática BNF
;;    <list>       ::= '() | <sublist> <list>
;; <sublist>       ::= <int> <int>
;;    <int>        ::= <number>
;;    <number>     ::= un número entero

(define invert
  (lambda (lst pred?)
    (if (not (valid-list? lst))
        "Error: La lista debe estar compuesta únicamente por sublistas de exactamente dos enteros."
        (letrec ([invert-list
                  (lambda (lst)
                    (if (null? lst)
                        '()
                        (letrec ([first (car lst)]
                              [rest (cdr lst)])
                          (if (and (pred? (car first))
                                   (pred? (cadr first)))
                              (cons (reverse-list first) (invert-list rest))
                              (invert-list rest)))))])

          (invert-list lst)))))

;; Función list-set
;; Propósito:
;; list-set L n x pred? -> L': Procedimiento que recibe una lista L, un índice n, un elemento x y un predicado pred?.
;;                          Retorna una nueva lista L' donde el elemento en la posición n es reemplazado por x, 
;;                          siempre y cuando el elemento en la posición n cumpla con el predicado pred?.
;;
;; Gramática BNF
;;    <list>  ::= '() | <element> <list>
;; <element>  ::= <dato> | <list>
;;    <dato>  ::= <number> | <symbol> | <string> | <boolean>


;3
(define list-set
  (lambda (L n x pred?)
    (letrec ([modify
              (lambda (lst index)
                (cond
                  [(null? lst) '()]
                  [(= index 0) 
                   (if (pred? (car lst))
                       (cons x (cdr lst)) 
                       (cons (car lst) (modify (cdr lst) (- index 1))))]
                  [else 
                   (cons (car lst) (modify (cdr lst) (- index 1)))]))]) 
    
      (modify L n)))) ;

;; Función list-index
;; Propósito:
;; list-index pred? L -> n | #f: Procedimiento que recibe un predicado pred? y una lista L. 
;;                          Retorna el índice n del primer elemento en la lista que cumple con el predicado pred?, 
;;                          o #f si ningún elemento cumple con el predicado.
;;
;; Gramática BNF
;;    <list>  ::= '() | <element> <list>
;; <element>  ::= <dato> | <list>
;;    <dato>  ::= <number> | <symbol> | <string> | <boolean>

;5
(define list-index
  (lambda (pred? L)
    
    (letrec ([find-index
              (lambda (lst index)
                (cond
                  [(null? lst) #f] 
                  [(pred? (car lst)) index] 
                  [else (find-index (cdr lst) (+ index 1))]))])
      (find-index L 0)))) 



;7

;; Función cons-all
;; Propósito:
;; cons-all elem lst2 -> L': Procedimiento que toma un elemento `elem` y una lista `lst2`, 
;;                          y retorna una nueva lista `L'` donde cada elemento de `lst2` está 
;;                          emparejado con `elem` en una sublista.
;;
;; Gramática BNF
;;    <list>    ::= '() | <element> <list>
;; <element>    ::= <dato> | <list>
;;    <dato>    ::= <number> | <symbol> 
;; <sublist>    ::= (<element> <element>)
(define cons-all
  (lambda (elem lst2)
    (cond
      [(null? lst2) '()] 
      [else
       (cons (list elem (car lst2))
             (cons-all elem (cdr lst2)))]))) 

;; Función m-append
;; Propósito:
;; m-append lst1 lst2 -> L': Procedimiento que toma dos listas `lst1` y `lst2`, y retorna una nueva lista `L'` 
;;                        que es la concatenación de `lst1` y `lst2`.
;;
;; Gramática BNF
;;    <list>    ::= '() | <element> <list>
;; <element>    ::= <dato> | <list>
;;    <dato>    ::= <number> | <symbol> 


(define m-append
  (lambda (lst1 lst2)
    (cond
      [(null? lst1) lst2] 
      [else
       (cons (car lst1) 
             (m-append (cdr lst1) lst2))]))) 


;; Función cartesian-product
;; Propósito:
;; cartesian-product L1 L2 -> L': Procedimiento que toma dos listas `L1` y `L2` y 
;;                              retorna el producto cartesiano entre ellas como una nueva lista `L'` de sublistas.
;;
;; Gramática BNF
;;    <list>    ::= '() | <element> <list>
;; <element>    ::= <dato> | <list>
;;    <dato>    ::= <number> | <symbol> 
;; <sublist>    ::= (<element> <element>)

(define cartesian-product
  (lambda (L1 L2)
    (cond
      [(null? L1) '()] 
      [else
       (m-append (cons-all (car L1) L2) 
               (cartesian-product (cdr L1) L2))]))) 


;9

;; Función inversions
;; Propósito:
;; inversions L -> n: Procedimiento que recibe una lista L y retorna el número de inversiones en la lista.
;;                  Una inversión es un par de elementos en la lista tal que el elemento anterior es mayor que el elemento posterior.
;;
;; Gramática BNF
;;    <list>  ::= '() | <element> <list>
;; <element>  ::= <dato> | <list>
;;    <dato>  ::= <number> | <symbol> 
;; <number>  ::= un número entero


(define (inversions L)
  (letrec (
           (list-refs
            (lambda (lst idx)
              (if (= idx 0)
                  (car lst)
                  (list-refs (cdr lst) (- idx 1)))))
           (count-inversions-helper
            (lambda (i j)
              (cond
                ((>= i (list-length L)) 0)
                ((>= j (list-length L)) (count-inversions-helper (+ i 1) (+ i 2)))
                ((> (list-refs L i) (list-refs L j))
                 (+ 1 (count-inversions-helper i (+ j 1))))
                (else (count-inversions-helper i (+ j 1)))))))
    (count-inversions-helper 0 1)))


;11
;; Función zip
;; Propósito:
;; zip F L1 L2 -> L: Procedimiento que toma una función F y dos listas L1 y L2. 
;;                Retorna una nueva lista L donde cada elemento es el resultado de aplicar F 
;;                a los elementos correspondientes de L1 y L2.
;;
;; Gramática BNF
;;    <list>  ::= '() | <element> <list>
;; <element>  ::= <dato> | <list>
;;    <dato>  ::= <number> | <symbol>
;;    <function> ::= <lambda-expression>
(define (zip F L1 L2)
  ((lambda (L1 L2)
     (define (zip-rec L1 L2)
       (if (null? L1)
           '()
           (cons (F (car L1) (car L2))
                 (zip-rec (cdr L1) (cdr L2)))))
     (zip-rec L1 L2)) L1 L2))


;; Función operate
;; Propósito:
;; operate lrators lrands -> result: Procedimiento que toma dos listas, lrators y lrands.
;;                           - lrators: Una lista de funciones (operadores).
;;                           - lrands: Una lista de operandos.
;;                           La función aplica secuencialmente cada operador a los operandos en lrands y retorna el resultado final.
;;
;; Gramática BNF
;;    <list>  ::= '() | <element> <list>
;; <element>  ::= <dato> | <list>
;;    <dato>  ::= <number> | <symbol> 
;; <function> ::= <lambda-expression>


;13
(define operate
  (lambda (lrators lrands)
    (letrec ((apply-ops
              (lambda (ops nums)
                (if (null? ops)
                    (car nums)
                    (apply-ops (cdr ops)
                               (cons ((lambda (op a b) (op a b)) 
                                      (car ops) (car nums) (cadr nums))
                                     (cddr nums)))))))
      (apply-ops lrators lrands))))



;15
;; Función count-odd-and-even
;; Propósito:
;; count-odd-and-even tree -> result: Procedimiento que toma un árbol binario representado como una lista anidada y cuenta la cantidad de nodos pares e impares en el árbol.
;;
;; Gramática BNF
;;    <tree> ::= '() | (<element> <tree> <tree>)
;; <element> ::= <number> | <symbol> | <string> | <boolean>


;; Función count-nodes
;; Propósito:
;; count-nodes tree -> (list even-count odd-count): Contar nodos pares e impares en el árbol binario.
;;
;; Gramática BNF
;;    <tree> ::= '() | (<element> <tree> <tree>)
;; <element> ::= <number>

;; Función count-even
;; Propósito:
;; count-even value left-even right-even -> even-count: Contar nodos pares en el árbol, sumando el valor actual.
;;
;; Gramática BNF
;;    <value> ::= <number>
;; <left-even> ::= <number>
;; <right-even> ::= <number>


;; Función count-odd
;; Propósito:
;; count-odd value left-odd right-odd -> odd-count: Contar nodos impares en el árbol, sumando el valor actual.
;;
;; Gramática BNF
;;    <value> ::= <number>
;; <left-odd> ::= <number>
;; <right-odd> ::= <number>





(define (count-odd-and-even tree)

  (letrec ((count-nodes
            (lambda (tree)
              (if (null? tree)
                  (list 0 0)  
                  (letrec ((value (car tree))
                         (left (cadr tree))
                         (right (caddr tree))
                         (left-counts (count-nodes left))
                         (right-counts (count-nodes right))
                         (left-even (car left-counts))
                         (left-odd (cadr left-counts))
                         (right-even (car right-counts))
                         (right-odd (cadr right-counts)))
                    (list (count-even value left-even right-even)
                          (count-odd value left-odd right-odd))))))
          ;; Función auxiliar para contar pares
          (count-even
            (lambda (value left-even right-even)
              (if (even? value)
                  (+ left-even right-even 1)
                  (+ left-even right-even))))
          ;; Función auxiliar para contar impares
          (count-odd
            (lambda (value left-odd right-odd)
              (if (odd? value)
                  (+ left-odd right-odd 1)
                  (+ left-odd right-odd)))))
    ;; Obtener los resultados y convertirlos en una lista
    (count-nodes tree)))

;17

;; Función prod-scalar-matriz
;; Propósito:
;; prod-scalar-matriz mat vec -> result: Procedimiento que toma una matriz y un vector, y retorna una lista con el producto escalar de cada fila de la matriz con el vector.
;;
;; Gramática BNF
;;    <mat> ::= '() | (<row> <mat>)
;;    <row> ::= '() | (<element> <row>)
;;    <vec> ::= '() | (<element> <vec>)
;; <element> ::= <number> | <symbol> | <string> | <boolean>


;; Función multiply-row
;; Propósito:
;; multiply-row row vector -> result: Multiplicar cada elemento de la fila por el correspondiente elemento del vector y devolver una lista de los productos.
;;
;; Gramática BNF
;;    <row> ::= '() | (<element> <row>)
;;    <vector> ::= '() | (<element> <vector>)
;; <element> ::= <number>



(define (prod-scalar-matriz mat vec)
  ;; Definir multiply-row usando lambda
  (define multiply-row
    (lambda (row vector)
      (if (null? row)
          '()
          (cons (* (car row) (car vector))
                ((lambda (rest-row rest-vector)
                   (if (null? rest-row)
                       '()
                       (cons (* (car rest-row) (car rest-vector))
                             ((lambda (rest-row rest-vector)
                                (multiply-row rest-row rest-vector))
                              (cdr rest-row) (cdr rest-vector)))))
                 (cdr row) (cdr vector))))))

  ;; Definir process-matrix usando lambda
  (define process-matrix
    (lambda (matrix)
      (if (null? matrix)
          '() ; 
          (cons ((lambda (row)
                   (multiply-row row vec))
                 (car matrix))
                ((lambda (rest-matrix)
                   (process-matrix rest-matrix))
                 (cdr matrix))))))

  
  (process-matrix mat))

